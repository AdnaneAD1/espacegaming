import { doc, updateDoc, serverTimestamp, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';

/**
 * Script pour mettre √† jour la deadline d'inscription d'un tournoi migr√©
 * Utilis√© apr√®s migration de donn√©es pour d√©finir une nouvelle date limite
 */

interface UpdateDeadlineOptions {
  tournamentId: string;
  deadline: Date;
}

/**
 * Met √† jour la deadline d'inscription pour un tournoi sp√©cifique
 */
async function updateDeadlineRegister(options: UpdateDeadlineOptions): Promise<void> {
  const { tournamentId, deadline } = options;
  
  try {
    // V√©rifier que le tournoi existe
    const tournamentRef = doc(db, 'tournaments', tournamentId);
    const tournamentDoc = await getDoc(tournamentRef);
    
    if (!tournamentDoc.exists()) {
      throw new Error(`Tournoi avec l'ID ${tournamentId} introuvable`);
    }

    // Mettre √† jour la deadline d'inscription
    await updateDoc(tournamentRef, {
      deadline_register: deadline,
      updatedAt: serverTimestamp()
    });

    console.log(`‚úÖ Deadline d'inscription mise √† jour pour le tournoi ${tournamentId}`);
    console.log(`üìÖ Nouvelle deadline: ${deadline.toLocaleString('fr-FR')}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de la deadline:', error);
    throw error;
  }
}

/**
 * Script principal d'ex√©cution
 * Exemple d'utilisation pour mettre √† jour la deadline d'un tournoi migr√©
 */
async function main() {
  try {
    // Exemple: mettre √† jour la deadline pour un tournoi migr√©
    // Remplacez 'TOURNAMENT_ID' par l'ID r√©el du tournoi
    const tournamentId = process.env.TOURNAMENT_ID || 'TOURNAMENT_ID_HERE';
    
    // D√©finir une nouvelle deadline (par exemple, dans 7 jours)
    const newDeadline = new Date();
    newDeadline.setDate(newDeadline.getDate() + 7);
    
    await updateDeadlineRegister({
      tournamentId,
      deadline: newDeadline
    });
    
    console.log('üéâ Script termin√© avec succ√®s');
    
  } catch (error) {
    console.error('üí• Erreur lors de l\'ex√©cution du script:', error);
    process.exit(1);
  }
}

// Exporter les fonctions pour utilisation dans d'autres modules
export { updateDeadlineRegister };

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  main();
}
